name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v0.9.0, v1.0.0, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/streams-prefetcher

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            # Try to extract the section for this version
            CHANGELOG=$(awk "/## \[${VERSION#v}\]/,/## \[/" CHANGELOG.md | sed '$d' | tail -n +2)

            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details."
            fi
          else
            CHANGELOG="Release $VERSION"
          fi

          # Create release notes
          cat > release_notes.md << EOF
          $CHANGELOG

          ## Docker Images

          \`\`\`bash
          # Specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION

          # Latest stable
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          \`\`\`
          EOF

          # Create release (will fail if release already exists, which is fine)
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file release_notes.md \
            || echo "Release already exists, skipping creation"
